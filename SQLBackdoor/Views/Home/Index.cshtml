@{
    ViewData["Title"] = "Home Page";
}



<form class="form-inline">
    <div class="form-group mb-2">
        <label for="server">Server</label>
        <input type="text" class="form-control-plaintext" id="server">
    </div>
    <div class="form-group mb-2">
        <label for="username">Username</label>
        <input type="text" class="form-control-plaintext" id="username">
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <label for="password">Password</label>
        <input type="password" class="form-control" id="password" placeholder="Password">
    </div>
    <div class="form-group mb-2">
        <label for="database">Database</label>
        <input type="text" class="form-control-plaintext" id="database">
    </div>
</form>

<hr />
<div class="editor-holder fullscreen">
    <ul class="toolbar">
        <li><a href="#" id="indent" title="Toggle tabs or spaces"><i class="fa fa-indent"></i></a></li>
        <li><a href="#" id="fullscreen" title="Toggle fullscreen mode"><i class="fa fa-expand"></i></a></li>
        <li><a href="#" id="btn-execute" title=""><i class="fa fa-play"></i></a></li>
    </ul>
    <div class="scroller">
        <textarea class="editor allow-tabs"></textarea>
        <pre><code class="syntax-highight sql"></code></pre>
    </div>
</div>



@section scripts{
    <script>
        hljs.initHighlightingOnLoad();

        var tabCharacter = "  ";
        var tabOffset = 2;
        var table;

        $(document).on('click', '#indent', function (e) {
            e.preventDefault();
            var self = $(this);

            self.toggleClass('active');

            if (self.hasClass('active')) {
                tabCharacter = "\t";
                tabOffset = 1;
            }
            else {
                tabCharacter = "  ";
                tabOffset = 2;
            }
        })

        $(document).on('click', '#fullscreen', function (e) {
            e.preventDefault();
            var self = $(this);

            self.toggleClass('active');
            self.parents('.editor-holder').toggleClass('fullscreen');
        });

        $(document).on('click', '#btn-execute', function (e) {

            var me = $('.editor');
            var content = me.val();
            var escaped = escapeHtml(content);

            if (escaped == "" || escaped == undefined) {
                alert("Erro de sintaxe!");
                e.preventDefault();
                return;
            }

            var request = {
                "Server": $("#server").val(),
                "Username": $("#username").val(),
                "Password": $("#password").val(),
                "Database": $("#database").val(),
                "Query": escaped
            };

            $.post(
                {
                    url: "/ssms/api/SqlExecutor",
                    contentType: "application/json",
                    dataType: 'json',
                    data: JSON.stringify(request),
                    beforeSend: function () {
                        if ($.fn.DataTable.isDataTable('.table-result')) {
                            $('.table-result').DataTable().destroy(true);
                        }

                        $('.table-result tbody').empty();
                    },
                    success: function (data) {
                        myJsonData = data;
                        populateDataTable(myJsonData);
                    },
                    error: function (e) {
                        console.log("There was an error with your request...");
                        console.log("error: " + JSON.stringify(e));
                    }
                });

            e.preventDefault();
        });



        /*------------------------------------------
            Render existing code
        ------------------------------------------*/
        $(document).on('ready', function () {
            hightlightSyntax();

            //emmet.require('textarea').setup({
            //    pretty_break: true,
            //    use_tab: true
            //});
        });




        /*------------------------------------------
            Capture text updates
        ------------------------------------------*/
        $(document).on('ready load keyup keydown change', '.editor', function () {
            correctTextareaHight(this);
            hightlightSyntax();
        });


        /*------------------------------------------
            Resize textarea based on content
        ------------------------------------------*/
        function correctTextareaHight(element) {
            var self = $(element),
                outerHeight = self.outerHeight(),
                innerHeight = self.prop('scrollHeight'),
                borderTop = parseFloat(self.css("borderTopWidth")),
                borderBottom = parseFloat(self.css("borderBottomWidth")),
                combinedScrollHeight = innerHeight + borderTop + borderBottom;

            if (outerHeight < combinedScrollHeight) {
                self.height(combinedScrollHeight);
            }
        }
        // function correctTextareaHight(element){
        // 	while($(element).outerHeight() < element.scrollHeight + parseFloat($(element).css("borderTopWidth")) + parseFloat($(element).css("borderBottomWidth"))) {
        // 		$(element).height($(element).height()+1);
        // 	};
        // }


        /*------------------------------------------
            Run syntax hightlighter
        ------------------------------------------*/
        function hightlightSyntax() {
            var me = $('.editor');
            var content = me.val();
            var codeHolder = $('code');
            var escaped = escapeHtml(content);

            codeHolder.html(escaped);

            $('.syntax-highight').each(function (i, block) {
                hljs.highlightBlock(block);
            });
        }


        /*------------------------------------------
            String html characters
        ------------------------------------------*/
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }


        /*------------------------------------------
            Enable tabs in textarea
        ------------------------------------------*/
        $(document).delegate('.allow-tabs', 'keydown', function (e) {
            var keyCode = e.keyCode || e.which;

            if (keyCode == 9) {
                e.preventDefault();
                var start = $(this).get(0).selectionStart;
                var end = $(this).get(0).selectionEnd;

                // set textarea value to: text before caret + tab + text after caret
                $(this).val($(this).val().substring(0, start)
                    + tabCharacter
                    + $(this).val().substring(end));

                // put caret at right position again
                $(this).get(0).selectionStart =
                    $(this).get(0).selectionEnd = start + tabOffset;
            }
        });



        function populateDataTable(response) {

            var elementTable = $("<table></table>");
            elementTable.addClass("table-result");

            $("body").append(elementTable);

            console.log("populating data table...");
            // clear the table before populating it with more data
            debugger;

            var columns = [];
            var columnNames = Object.getOwnPropertyNames(response.data[0]);

            for (var i = 0; i < columnNames.length; i++) {
                columns.push({
                    "title": columnNames[i],
                    "data": columnNames[i]
                })
            }



            table = elementTable.dataTable({
                dom: "Bfrtip",
                responsive: true,
                data: response.data,
                columns: columns
            });
        }
    </script>
}